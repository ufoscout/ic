workspace(
    name = "ic",
    managed_directories = {"@sw_npm": ["node_modules"]},
)

load("//third_party/lmdb-0.9.70:repository.bzl", "lmdb_repository")
load("//third_party/lmdb-rkv-0.14.99:repository.bzl", "lmdb_rkv_repository")
load("//third_party/wabt-rs-0.10.0:repository.bzl", "wabt_rs_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")

http_archive(
    name = "bazel_skylib",
    sha256 = "f7be3474d42aae265405a592bb7da8e171919d74c16f082a5457840f06054728",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
    ],
)

git_repository(
    name = "rules_rust",
    commit = "e702f3d1cea8a43021ea37317e2448c6137abe9a",
    remote = "https://github.com/dfinity-lab/rules_rust.git",
    shallow_since = "1661883448 +0000",
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains(
    edition = "2021",
    version = "1.60.0",
)

git_repository(
    name = "rules_foreign_cc",
    commit = "b1e65fec980c59cf5c2e21f7eb90fed331c36c66",
    remote = "https://github.com/bazelbuild/rules_foreign_cc.git",
)

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

http_archive(
    name = "rules_proto",
    sha256 = "66bfdf8782796239d3875d37e7de19b1d94301e8972b3cbd2446b332429b4df1",
    strip_prefix = "rules_proto-4.0.0",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
        "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
    ],
)

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

load("@rules_rust//crate_universe:defs.bzl", "crate")
load("//bazel:external_crates.bzl", "external_crates_repository")

external_crates_repository(
    name = "crate_index",
    annotations = {
        "ic_bls12_381": [crate.annotation(
            rustc_flags = [
                "-C",
                "opt-level=3",
            ],
        )],
        "ring": [crate.annotation(
            build_script_env = {
                "CFLAGS": "-fdebug-prefix-map=$${pwd}=/source",
            },
        )],
        "librocksdb-sys": [crate.annotation(
            build_script_env = {
                # Bazel executors assign only one core when executing
                # the build script, making rocksdb compilation
                # extremely slow. Bazel doesn't provide any way to
                # override this settings so we cheat by starting more
                # processes in parallel.
                #
                # See IDX-2406.
                "NUM_JOBS": "8",
            },
        )],
        "pprof": [crate.annotation(
            build_script_data = [
                "@com_google_protobuf//:protoc",
            ],
            build_script_env = {
                "PROTOC": "$(execpath @com_google_protobuf//:protoc)",
            },
        )],
        "prost-build": [crate.annotation(
            build_script_env = {
                "PROTOC_NO_VENDOR": "1",
            },
        )],
    },
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()

# Motoko support

http_archive(
    name = "rules_motoko",
    sha256 = "9b677fc5d3b42749d13b7734b3a87d4d40135499a189e843ae3f183965e255b7",
    strip_prefix = "rules_motoko-0.1.0",
    urls = ["https://github.com/dfinity/rules_motoko/archive/refs/tags/v0.1.0.zip"],
)

http_archive(
    name = "motoko_base",
    build_file_content = """
filegroup(name = "sources", srcs = glob(["*.mo"]), visibility = ["//visibility:public"])
      """,
    sha256 = "582d1c90faa65047354ae7530f09160dd7e04882991287ced7ea7a72bd89d06e",
    strip_prefix = "motoko-base-moc-0.6.24/src",
    urls = ["https://github.com/dfinity/motoko-base/archive/refs/tags/moc-0.6.24.zip"],
)

load("@rules_motoko//motoko:repositories.bzl", "rules_motoko_dependencies")

rules_motoko_dependencies()

# Support for constructing archives
http_archive(
    name = "rules_pkg",
    sha256 = "451e08a4d78988c06fa3f9306ec813b836b1d076d0f055595444ba4ff22b867f",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/0.7.1/rules_pkg-0.7.1.tar.gz",
        "https://github.com/bazelbuild/rules_pkg/releases/download/0.7.1/rules_pkg-0.7.1.tar.gz",
    ],
)

load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

rules_pkg_dependencies()

# Docker container support

http_archive(
    name = "io_bazel_rules_docker",
    sha256 = "b1e80761a8a8243d03ebca8845e9cc1ba6c82ce7c5179ce2b295cd36f7e394bf",
    urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.25.0/rules_docker-v0.25.0.tar.gz"],
)

load(
    "@io_bazel_rules_docker//toolchains/docker:toolchain.bzl",
    docker_toolchain_configure = "toolchain_configure",
)

docker_toolchain_configure(
    name = "docker_config",
    gzip_target = "@pigz",
)

load(
    "@io_bazel_rules_docker//repositories:repositories.bzl",
    container_repositories = "repositories",
)

container_repositories()

load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")

container_deps(go_repository_default_config = "@//:WORKSPACE.bazel")

load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_pull",
)

container_pull(
    name = "rust_base",
    digest = "sha256:8e94f031353596c3fc9db6a2499bcc82dacc40cb71e0703476f9fad41677efdf",
    registry = "gcr.io",
    repository = "distroless/cc-debian11",
)

# Third party dependencies that require special treatment

wabt_rs_repository(name = "wabt_rs")

lmdb_repository(name = "lmdb")

lmdb_rkv_repository(name = "lmdb_rkv")

http_archive(
    name = "pigz",
    build_file_content = """
cc_library(
    name = "zopfli",
    hdrs = glob(["zopfli/src/zopfli/*.h"]),
    srcs = glob(["zopfli/src/zopfli/*.c"]),
)

cc_binary(
    name = "pigz",
    srcs = [
        "pigz.c",
        "try.c",
        "try.h",
        "yarn.c",
        "yarn.h",
    ],
    linkopts = [
        "-lm",
        "-lpthread",
        "-lz",
    ],
    deps = [":zopfli"],
    visibility = ["//visibility:public"],
)""",
    sha256 = "d4396b58bc2875daf8dc3ae9a657be945c2c2697944894fea8a72634eded93ab",
    strip_prefix = "pigz-2.7",
    url = "https://github.com/madler/pigz/archive/refs/tags/v2.7.zip",
)

http_archive(
    name = "buildifier_prebuilt",
    sha256 = "0450069a99db3d414eff738dd8ad4c0969928af13dc8614adbd1c603a835caad",
    strip_prefix = "buildifier-prebuilt-0.4.0",
    urls = [
        "http://github.com/keith/buildifier-prebuilt/archive/0.4.0.tar.gz",
    ],
)

load("@buildifier_prebuilt//:deps.bzl", "buildifier_prebuilt_deps")

buildifier_prebuilt_deps()

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

load("@buildifier_prebuilt//:defs.bzl", "buildifier_prebuilt_register_toolchains")

buildifier_prebuilt_register_toolchains()

new_git_repository(
    name = "sevtool",
    build_file = "//ic-os:BUILD.sevtool.bazel",
    commit = "3e6418e09f5ca91d789e115d0751ead1227aab47",
    remote = "https://github.com/AMDESE/sev-tool.git",
)

# Rosetta CLI

load("//bazel:rosetta_cli.bzl", "rosetta_cli_repository")

rosetta_cli_repository(name = "rosetta-cli")

# NodeJS dependencies

http_archive(
    name = "build_bazel_rules_nodejs",
    sha256 = "f10a3a12894fc3c9bf578ee5a5691769f6805c4be84359681a785a0c12e8d2b6",
    urls = ["https://github.com/bazelbuild/rules_nodejs/releases/download/5.5.3/rules_nodejs-5.5.3.tar.gz"],
)

load("@build_bazel_rules_nodejs//:repositories.bzl", "build_bazel_rules_nodejs_dependencies")

build_bazel_rules_nodejs_dependencies()

load("@build_bazel_rules_nodejs//:index.bzl", "node_repositories", "npm_install")

node_repositories(node_version = "17.9.1")

npm_install(
    name = "sw_npm",
    package_json = "//typescript/service-worker:package.json",
    package_lock_json = "//typescript/service-worker:package-lock.json",
)

# rclone binary for upload_artifacts
load("//bazel:rclone.bzl", "rclone_repository")

rclone_repository(name = "rclone")

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "79381b0975ba7d2d5653239e5bab12cf54d89b10217fe771b8edd95047a2e44b",
    strip_prefix = "bazel-lib-1.12.1",
    url = "https://github.com/aspect-build/bazel-lib/archive/refs/tags/v1.12.1.tar.gz",
)

load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies")

aspect_bazel_lib_dependencies()
