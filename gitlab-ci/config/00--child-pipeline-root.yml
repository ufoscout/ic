# This file will be included in the child pipeline if there ARE changes in the /rs or /ic-os/guestos folder
#
# - all jobs included transitively from this file (keys not starting with dot) will run.
# - additional `cargo test` jobs will be generated for some crates by `src/gen_gitlab_cargo_pipeline`

include:
- local: /gitlab-ci/config/00--common.yml
- local: /gitlab-ci/config/20--test--docker-build-ic.yml
- local: /gitlab-ci/config/20--test--after-script.yml
- local: /gitlab-ci/config/30--cargo-build--child-pipeline.yml
- local: /gitlab-ci/config/40--cargo-test--child-pipeline.yml
- local: /gitlab-ci/config/46--guest-os-build--guest-base-image.yml
- local: /gitlab-ci/config/46--guest-os-build--guest-os-diskimg.yml
- local: /gitlab-ci/config/46--guest-os-build--guest-os-updateimg.yml
- local: /gitlab-ci/config/46--rosetta-api-docker-image.yml
- local: /gitlab-ci/config/47--guest-os-test--guest-os-e2e-test.yml
- local: /gitlab-ci/config/47--guest-os-test--e2e-scalability.yml
- local: /gitlab-ci/config/52--host-os-build--host-base-image.yml
- local: /gitlab-ci/config/52--host-os-build--host-os-diskimg.yml
- local: /gitlab-ci/config/52--host-os-build--host-os-updateimg.yml
- local: /gitlab-ci/config/53--host-os-build--setupos-base-image.yml
- local: /gitlab-ci/config/53--host-os-build--build-setupos.yml
- local: /gitlab-ci/config/55--determinism-test.yml

.cargo-build-docker-protected:
  needs: []  # don't wait on other jobs by default
  extends:
    - .ubuntu-docker-k8s-protected
    - .rules-parent-pipeline
  stage: cargo-build

.cargo-build-docker:
  needs: []  # don't wait on other jobs by default
  extends:
    - .ubuntu-nix-docker-k8s-pinned-dc
    - .rules-parent-pipeline
  stage: cargo-build

.cargo-build-macos:
  needs: []  # don't wait on other jobs by default
  extends:
    - .macos-nix-native
    - .rules-parent-pipeline-protected-branch-only
  stage: cargo-build

.cargo-crate-test:
  extends:
    - .ubuntu-nix-docker-k8s-pinned-dc
    - .rules-parent-pipeline
  stage: cargo-test
  needs:
    - job: cargo-build-release-linux-native
      artifacts: false
    - job: cargo-build-canisters
      artifacts: false
  artifacts:
    reports:
      junit: test_report.xml
  variables:
    # Print backtrace if a test panics
    RUST_BACKTRACE: 1
    CARGO_TEST_FLAGS_EXTRA: "" # Allows passing any extra flags, such as "--release"
    CARGO_TEST_TIMEOUT: 3000
  script:
    - |
      set -eExuo pipefail

      # required binary artifacts
      mkdir -p artifacts/release
      pushd artifacts/release
      curl -sfS --retry 5 --retry-delay 10 \
        "http://download.proxy.dfinity.systems:8080/ic/$CI_COMMIT_SHA/release/canister_sandbox.gz" -O
      curl -sfS --retry 5 --retry-delay 10 \
        "http://download.proxy.dfinity.systems:8080/ic/$CI_COMMIT_SHA/release/sandbox_launcher.gz" -O
      popd

      # required canisters
      "${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/rclone_download.py \
        --git-rev "$CI_COMMIT_SHA" \
        --remote-path=canisters --out="artifacts/canisters"

      # Setup the cargo canister sandbox
      cd "${CI_PROJECT_DIR}/rs"
      TMP_DIR=$(mktemp -d)
      gunzip -c -d "${CI_PROJECT_DIR}/artifacts/release/canister_sandbox.gz" > "${TMP_DIR}/canister_sandbox"
      chmod +x "${TMP_DIR}/canister_sandbox"
      gunzip -c -d "${CI_PROJECT_DIR}/artifacts/release/sandbox_launcher.gz" > "${TMP_DIR}/sandbox_launcher"
      chmod +x "${TMP_DIR}/sandbox_launcher"
      export PATH="${TMP_DIR}:$PATH"

      echo "${CARGO_TEST_FLAGS_EXTRA}"

      # Use the nix-shell from the `rs` folder.
      cd "${CI_PROJECT_DIR}/rs"
      # Build the test.
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" nix-shell -- \
      timeout -k 10 "${CARGO_TEST_TIMEOUT}" nix-shell --run "
        buildevents cmd ${ROOT_PIPELINE_ID} ${CI_JOB_ID} cargo-build -- cargo test -p ${CI_JOB_NAME} --benches --no-run ${CARGO_TEST_FLAGS_EXTRA}
      "

      # Run the test.
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" nix-shell -- \
      timeout -k 10 "${CARGO_TEST_TIMEOUT}" nix-shell --run "
        set -euo pipefail

        source \"$CI_PROJECT_DIR/gitlab-ci/src/canisters/wasm-build-functions.sh\"
        export_wasm_canister_paths \"${CI_PROJECT_DIR}/artifacts/canisters\"
        buildevents cmd ${ROOT_PIPELINE_ID} ${CI_JOB_ID} cargo-test -- cargo test -p ${CI_JOB_NAME} ${CARGO_TEST_FLAGS_EXTRA} -- --report-time -Z unstable-options --format=json | tee ci_output.json
      "
    # Test that benchmarks work properly (no stats are recorded)
    # Not added to ci_output.json because benchmark bins don't support the unstable-options flags
    - |
      if [ "$CI_JOB_NAME" != "ic-nns-governance" ]; then
        buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" nix-shell -- timeout -k 10 "${CARGO_TEST_TIMEOUT}" nix-shell --run "
          set -euo pipefail

          source \"$CI_PROJECT_DIR/gitlab-ci/src/canisters/wasm-build-functions.sh\"
          export_wasm_canister_paths \"${CI_PROJECT_DIR}/artifacts/canisters\"
          buildevents cmd ${ROOT_PIPELINE_ID} ${CI_JOB_ID} cargo-test -- cargo test --benches -p ${CI_JOB_NAME} ${CARGO_TEST_FLAGS_EXTRA}
        "
      fi

.cargo-crate-tests-process-per-test:
  # Run each test in the crate in a separate processes, increasing parallelism and reducing contention
  extends: .cargo-crate-test
  stage: cargo-test
  needs:
    - job: cargo-build-canisters
      artifacts: false
    - job: cargo-build-release-linux-native
      artifacts: false
  script:
    - |
      set -eExuo pipefail

      "${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/rclone_download.py --git-rev "$CI_COMMIT_SHA" \
        --remote-path=canisters --out="artifacts/canisters"
      "${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/rclone_download.py --git-rev "$CI_COMMIT_SHA" \
        --remote-path=release --out="artifacts/release"

      TARGET_CRATE="${TARGET_CRATE:-$CI_JOB_NAME}"
      TARGS=""
      mkdir logs
      if [ "$TARGET_CRATE" == "ic-nns-integration-tests" ]; then
        TARGS="--nocapture"
      fi

      # Setup the cargo canister sandbox
      cd "${CI_PROJECT_DIR}/rs"
      TMP_DIR=$(mktemp -d)
      gunzip -c -d "${CI_PROJECT_DIR}/artifacts/release/canister_sandbox.gz" > "${TMP_DIR}/canister_sandbox"
      chmod +x "${TMP_DIR}/canister_sandbox"
      gunzip -c -d "${CI_PROJECT_DIR}/artifacts/release/sandbox_launcher.gz" > "${TMP_DIR}/sandbox_launcher"
      chmod +x "${TMP_DIR}/sandbox_launcher"
      export PATH="${TMP_DIR}:$PATH"

      cd "${CI_PROJECT_DIR}/rs"

      $SHELL_WRAPPER timeout -k 10 "${CARGO_TEST_TIMEOUT}" nix-shell --run "
        set -eExuo pipefail
        # Build the test binary.
        buildevents cmd \"$ROOT_PIPELINE_ID\" \"$CI_JOB_ID\" cargo-build -- cargo test -p \"${TARGET_CRATE}\" --no-run --release
      "

      $SHELL_WRAPPER timeout -k 10 "${CARGO_TEST_TIMEOUT}" nix-shell --run "
        set -eExuo pipefail
        source \"$CI_PROJECT_DIR/gitlab-ci/src/canisters/wasm-build-functions.sh\"
        export_wasm_canister_paths \"${CI_PROJECT_DIR}/artifacts/canisters\"

        # Run each test in a separate process
        cargo test -p \"${TARGET_CRATE}\" --release -- --list | grep ': test' | sed 's/: test$//' > /tmp/test-list.txt
        parallel -a /tmp/test-list.txt --halt now,fail=1 --eta --results ../logs/ci_output -t --joblog ../logs/ci_joblog buildevents cmd \"$ROOT_PIPELINE_ID\" \"$CI_JOB_ID\" '{}' -- cargo test -p \"${TARGET_CRATE}\" --release '{}' -- $TARGS --report-time -Z unstable-options --format=json | tee ../logs/job.log
      "
