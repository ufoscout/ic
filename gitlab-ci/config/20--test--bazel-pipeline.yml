.bazel-test-all:
  extends:
    - .bazel-rules-pipeline
    - .bazel-build-docker
    - .ic-build-bazel-image
  stage: test
  needs: []
  artifacts:
    when: always
    paths:
      - bazel-build-log*.json*
    reports:
      junit: bazel-testlogs-gitlab/**/test.xml
  variables:
    BAZEL_COMMAND: "test"
    BAZEL_TARGETS: "//..."
  script:
    - set -eufo pipefail
    - bazel version
    - AWS_CREDS="${HOME}/.aws/credentials"
    - mkdir -p "$(dirname "${AWS_CREDS}")"
    - ln -fs "${AWS_SHARED_CREDENTIALS_FILE}" "${AWS_CREDS}"
    - ln -fs "${DEV_ROOT_CA}" ic-os/guestos/dev-root-ca.crt # https://gitlab.com/dfinity-lab/public/ic/-/blob/master/ic-os/defs.bzl#L85
    - "# shellcheck disable=SC2086 # ${BAZEL_...} variables are expected to contain several arguments. We have `set -f` set above to disable globbing (and therefore only allow splitting)"
    - >
      buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" "${CI_JOB_NAME}-bazel-cmd" -- bazel
      ${BAZEL_STARTUP_ARGS}
      ${BAZEL_COMMAND}
      --config ci
      --build_metadata=BUILDBUDDY_LINKS="[GitLab CI Job](${CI_JOB_URL})"
      --ic_version="${CI_COMMIT_SHA}"
      ${BAZEL_EXTRA_ARGS}
      ${BAZEL_TARGETS}
      2>&1 |
      perl -pe 'BEGIN { select(STDOUT); $| = 1 } s/(.*Streaming build results to:.*)/\o{33}[92m$1\o{33}[0m/'
  after_script:
    - | 
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "*************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel **"
      echo -e "*************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - !reference [after_script]

bazel-test-all:
  extends:
    - .bazel-test-all
  variables:
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going"
    BAZEL_TARGETS: "//... //:upload_sdk //ic-os/guestos/dev:upload_disk-img"

bazel-cache-perf-test-linux:
  extends:
    - bazel-test-all
    - .bazel-rules-post-master
  needs:
    - bazel-test-all
  variables:
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output"
  
bazel-test-all-rebuild:
  extends:
    - .bazel-test-all
    - .bazel-rules-post-master
  variables:
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output"
    BAZEL_EXTRA_ARGS: "--repository_cache= --disk_cache= --noremote_accept_cached --remote_instance_name=${CI_COMMIT_SHA}"

bazel-test-all-macos:
  extends:
    - .build-env-base
    - .bazel-test-all
  tags:
    - macos
  variables:
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output//${CI_CONCURRENT_ID}"
    BAZEL_COMMAND: "build"
    BAZEL_TARGETS: "//rs/... //:upload_sdk"
    BAZEL_EXTRA_ARGS: "--config dev"

bazel-cache-perf-test-macos:
  extends:
    - bazel-test-all-macos
    - .bazel-rules-post-master
  needs:
    - bazel-test-all-macos

bazel-cargo-test-parity:
  extends:
    - .bazel-test-all
    - .bazel-rules-test-parity
    - .ic-build-image
  artifacts:
    when: always
    paths:
      - artifacts/*
  script:
    - |
      set -eufo pipefail
      echo "Checking bazel vs cargo test parity"

      ./bazel/test_parity/compare_covered_tests.sh
